    citiesTownsSvg_module = function(){
    var svg_container = window.$( 'svg_container' ),
        citiesGroup = window.$( 'cities_group' ),
        private_citiesPolylineElementsArray = []; // This gets populated by private_addCityPolyLinesToSvgContainer().

    // This was used for manually clicking around the cities to get the state place coords.
    // It isn't used by anything.
    function collectStatePlaneCoords(e){
        if( !window.points ){ window.points = []; }
        var xMultiplier = ( this.presentMaxX - this.presentMinX ) / this.resizedMapWidth;
        var yMultiplier = ( this.presentMaxY - this.presentMinY ) / this.resizedMapHeight;
        var x = ( ( e.clientX - this.containerStyleLeft ) * xMultiplier + this.presentMinX );
        var y = ( this.presentMaxY - ( ( e.clientY - this.containerStyleTop ) * yMultiplier ) );

        points.push( x +','+y );
        console.log( utilities_module.convertMouseCoordsToStatePlane( e ) );
    }

    function private_randomCityColors(){
        var cities = private_citiesPolylineElementsArray,
            colorArray = ['rgb(93, 141, 195)', 'rgb(228, 128, 140)', 'rgb(94, 180, 137)','rgb(225, 149, 103)','rgb(127, 221, 201)','rgb(94, 166, 214)','rgb(108, 196, 105)'],
            colorIndex = 0;

        for( var i = 0, color = 0; i < cities.length; ++i/*,++color*/ ){
            color = (Math.random() * (colorArray.length-1)).toFixed(0);//(Math.random()*165 + 90).toFixed(0) +','+ (Math.random()*125 + 100).toFixed(0) +','+ (Math.random()*165 + 90).toFixed(0);
            cities[i].style.fill = colorArray[color];//'rgb('+ color +')';
            if( cities[i].getAttribute('Data') === 'GOLD BAR' ){ cities[i].style.fill = 'rgb(255, 215, 0)'; }
            //if( color === ( colorArray.length - 1 ) ){ color = 0; }
        }
    }

    var  resizeAllSvgCities = function(){
            var cities = private_citiesPolylineElementsArray;
            this.container.style.top = ( 0 - this.theMap.dragDiv._top ) +'px';
            this.container.style.left = ( 0 - this.theMap.dragDiv._left ) +'px';
            
            for( var i = 0; i < cities.length; ++i ){
                resizeOneSvgCity( private_citiesPolylineElementsArray[i] );
            }
        }.bind( { theMap: window.theMap, container: svg_container } );

    var resizeOneSvgCity = function( arg_cityPolyline ){
        var xMultiplier = ( this.presentMaxX - this.presentMinX ) / this.resizedMapWidth,
            yMultiplier = ( this.presentMaxY - this.presentMinY ) / this.resizedMapHeight,
            index = 0,
            pointsData = private_cityPolylines[arg_cityPolyline.getAttribute( 'Data' )].split(' '),
            len = pointsData.length,
            arr = x = y = undefined,
            points = [],
            presentMinX = this.presentMinX,
            presentMaxY = this.presentMaxY;

        while( index < len ){
            arr = pointsData[index].split( ',' );
            x = ( ( +arr[0] - presentMinX ) / xMultiplier );
            y = ( ( presentMaxY - +arr[1] ) / yMultiplier );
            points.push( x +','+ y );
            ++index;
        }
        arg_cityPolyline.setAttribute( 'points', points.join(' ') );
    }.bind( window.theMap );

    function getClientXYfromSP( x , y ){ 
        var xMultiplier = ( theMap.presentMaxX - theMap.presentMinX ) / theMap.resizedMapWidth,
            yMultiplier = ( theMap.presentMaxY - theMap.presentMinY ) / theMap.resizedMapHeight,
            x = (( +x - window.theMap.presentMinX  ) / xMultiplier),
            y = ( window.theMap.presentMaxY - (+y)) / yMultiplier;

        return {x: x, y: y, coords:'state plane'};
    }

    var boxZoom_city = function( arg_name ){
            var zoomBoxObj = private_zoomBoxesForCities[arg_name];
                boxClientXY = { start: getClientXYfromSP( zoomBoxObj.start.x, zoomBoxObj.start.y), end: getClientXYfromSP( zoomBoxObj.end.x, zoomBoxObj.end.y) }
                widthOfBox = boxClientXY.end.x - boxClientXY.start.x,
                heightOfBox = boxClientXY.end.y - boxClientXY.start.y,
                mapHalfWidthPoint =  this.resizedMapWidth / 2 + this.containerStyleLeft,
                mapHalfHeightPoint = this.resizedMapHeight / 2 + this.containerStyleTop,
                centerPointOfBox = {x: ( widthOfBox / 2 ) + boxClientXY.start.x + this.containerStyleLeft,
                                    y: ( heightOfBox / 2) + boxClientXY.start.y + this.containerStyleTop };
            
            window.city = arg_name;
            this._left = ( mapHalfWidthPoint - centerPointOfBox.x ) ;
            this._top  = ( mapHalfHeightPoint - centerPointOfBox.y) ;
            window.boxZoom_module.boxZoom_doTheZoom( {width: widthOfBox, height: heightOfBox, x: mapHalfWidthPoint, y: mapHalfHeightPoint });
        }.bind( window.theMap );

    // TODO: This is a hack job.
    function cityCoordinatesInit(){
        window.theMap.addEventListener('load', function(){
            if( this.theMap.sliderPosition <= 160 ){
                this.citiesGroup.style.display = 'none'; 
            } else {
                resizeAllSvgCities();
                this.citiesGroup.style.display = '';
            }
            this.cities_svg.style.zIndex = '';
            this.cities_svg.style.opacity = '1';
        }.bind( { cities_svg: svg_container, theMap: window.theMap, resizeAllSvgCities: resizeAllSvgCities, citiesGroup: citiesGroup } ) );
        window.theMap.mapContainer.addEventListener( window.theMap.mousewheelevt, function(){
            this.style.opacity = '0';
            this.style.zIndex = '-1000';
        }.bind( svg_container ));
        private_addCityPolyLinesToSvgContainer();
        private_randomCityColors();
    }

    var private_addCityPolyLinesToSvgContainer = function(){
        var parent = citiesGroup,
            polyLine = undefined,
            citiesArray = Object.keys( private_cityPolylines ),
            pointsObj = private_cityPolylines,
            zoomBoxObj = private_zoomBoxesForCities,
            tempArray = [];
                      
        for( var i = 0; i < citiesArray.length; ++i ){
            polyline = document.createElementNS("http://www.w3.org/2000/svg", 'polyline');
            polyline.setAttribute( 'points', pointsObj[citiesArray[i]] );
            polyline.setAttribute( 'onmouseover', "this.style.fillOpacity='0.4';" );
            polyline.setAttribute( 'onmouseout', "this.style.fillOpacity='';" );
            
            polyline.upperCaseName = citiesArray[i];
            polyline.addEventListener( 'mousedown', svgCitiesMouseDown );
            polyline.clickAble = true;
            polyline.theMap = window.$('theMap_primary');
            polyline.theMapContainer = window.$( 'theMap_container' );
            polyline.citiesGroup = citiesGroup;
            polyline.setAttribute( 'class', 'svg_cities' );
            polyline.setAttribute( 'Data', citiesArray[i] );
            parent.appendChild( polyline );
            tempArray.push( polyline )
        }
        private_citiesPolylineElementsArray = tempArray;
    }

    var svgCitiesSetOpacityToZero = function( e ){
        this.style.opacity = '0';
    }.bind( svg_container );

    var svgCitiesMouseDown = function ( e ){
            var obj = { boxZoom: boxZoom_city, self: this, theMap: this.theMap, theMapContainer: this.theMapContainer, citiesGroup: this.citiesGroup };
            var citiesMouseMove = function ( e ){
                        if ( e.clientY - this.theMap.pan.oldMouseY < 5 && e.clientX - this.theMap.pan.oldMouseX < 5 ){ return; }
                        this.self.clickAble = false;
                        //this.citiesGroup.style.zIndex = '-1000';
                        this.theMapContainer.removeEventListener('mousemove', citiesMouseMove );
                        this.theMapContainer.removeEventListener('mouseup', citiesMouseUp );
                    }.bind( obj );
            var citiesMouseUp = function ( e ){
                    this.theMapContainer.removeEventListener('mousemove', citiesMouseMove );
                    this.theMapContainer.removeEventListener('mouseup', citiesMouseUp );
                    if( this.self.clickAble ){
                        
                        // TODO: This setTimeout is a workaround, it lets the click event handler on the
                        // container fire off first before it does the zoom. If it does the zoom first
                        // then it changes the slider position to a lower number and creates a marker for
                        // no reason.
                        window.setTimeout(function(){ this.boxZoom( this.self.upperCaseName ); }.bind(this),0);
                    }
                    this.self.clickAble = true;
                }.bind( obj );
            this.theMapContainer.addEventListener('mousemove', citiesMouseMove );
            this.theMapContainer.addEventListener('mouseup', citiesMouseUp );
        }

    var private_cityPolylines = {
        SNOHOMISH: '1325468,350601 1326487,350601 1327030,350306 1327846,349831 1327778,349514 1327166,349514 1327121,348902 1327370,348857 1327325,347974 1327529,347974 1327506,347611 1328978,347566 1329001,345664 1328185,345664 1328321,345347 1329703,345347 1329680,347453 1329567,348087 1329974,348087 1329974,348178 1330178,348178 1330178,347906 1330790,347272 1330812,346230 1331129,346230 1331129,344894 1332941,344871 1332964,346185 1334322,346230 1334277,344849 1335613,344826 1335523,344079 1335704,342946 1335523,342629 1334979,341927 1334979,341452 1335183,341316 1335455,340501 1335387,340002 1334956,339300 1334503,338893 1334594,338485 1334028,337579 1333801,337194 1333779,336696 1333847,336289 1333892,335994 1333847,335564 1334096,335315 1334322,335020 1334322,334749 1334073,334567 1334164,334250 1334119,332960 1332443,332982 1331877,333888 1331650,334024 1331310,334499 1331061,334726 1330608,334884 1330065,334884 1328797,335315 1327438,335473 1326306,335519 1325898,335700 1325558,336039 1325241,336289 1324970,337013 1326736,336991 1327053,337308 1326849,337511 1326962,338055 1326894,338259 1326759,338463 1326713,338780 1326487,338621 1326283,339097 1326260,339685 1326011,339708 1326011,340184 1326623,340184 1326623,340319 1328004,340252 1328049,340954 1328185,341474 1328434,341882 1328955,342244 1326668,342290 1326645,343648 1326328,343648 1326396,346253 1325762,346253 1325762,346955 1326351,346955 1326374,347702 1325921,348064 1326260,348427 1326125,348653 1326147,348902 1326374,348925 1325785,349853 1325468.31128569,350601.1668392833',
        ARLINGTON: '1316201,421107 1321234,420968 1321432,422870 1322779,423227 1323255,423187 1324523,422791 1327218,422633 1327218,421364 1329160,421325 1329239,422197 1329873,422197 1329873,422712 1329239,422751 1329239,423980 1327931,424059 1327139,426675 1327931,426675 1328129,429330 1326782,429409 1326901,433412 1327535,433372 1328803,430994 1329318,431034 1329318,430677 1330785,430677 1331181,437058 1329794,436543 1329794,435869 1328446,435909 1328684,437890 1329120,437930 1329279,438366 1329397,438564 1329041,439277 1328962,439673 1329080,440109 1328288,440268 1327495,439753 1327456,440109 1324404,441655 1324483,437414 1324047,437335 1323255,436107 1318499,436265 1318618,435631 1319649,435512 1319649,434918 1318420,434997 1318935,434086 1318935,433610 1319292,433570 1319371,433927 1320243,433927 1320243,432223 1317310,432381 1316359,432580 1315686,433174 1315844,433769 1314814,433769 1314180,433491 1314061,432461 1315052,432421 1315052,431470 1313783,431549 1313783,429489 1313229,429290 1313189,428577 1311723,428577 1311762,429370 1311168,429409 1311168,429924 1309583,430479 1309305,430955 1309266,432025 1308909,432025 1308513,432857 1308592,437137 1305976,437058 1308473,432857 1308790,431787 1309107,430004 1309820,429924 1309820,428934 1309028,428854 1309959,420552 1313565,420552 1313565,421245 1314675,421245 1314606,420552 1316201,420483 1316201.2762091677,421107.28146513534',
        MARYSVILLE: '1309196,427348 1309959,420552 1313565,420552 1313565,421245 1314675,421245 1314606,420552 1316201,420483 1316201,421107 1320570,420968 1318697,417917 1318628,416391 1319807,416321 1319876,415212 1319530,413686 1318559,413617 1318420,410773 1318906,410704 1319044,409248 1318489,409317 1318351,401272 1320917,401203 1321055,394753 1322581,394822 1322651,395308 1323691,395308 1323691,397804 1325563,397804 1326188,397388 1326257,395863 1327991,395863 1327991,377623 1328129,375334 1324454,375404 1323621,374918 1323275,374710 1322512,374918 1321957,375404 1319530,375473 1318073,378247 1317033,378316 1316686,378732 1317172,379703 1316617,380258 1315299,380674 1314190,381923 1312664,380744 1309959,380813 1310375,412576 1309266,412576 1309266,413894 1307878,413894 1307878,415004 1309404,415004 1306006,421939 1305104,421939 1304203,423187 1303093,423187 1303024,424574 1307670,424574 1307809,427279 1309057,427279 1309196.6857329772,427348.9957508496',
        EVERETT: '1308626,374104 1308764,375005 1308626,375005 1308626,377502 1308210,377849 1307863,377849 1307724,377571 1307100,377779 1307169,378126 1306892,378542 1306614,378126 1306060,378404 1306892,379374 1306961,379929 1307169,379929 1310082,380623 1311261,380553 1311955,376462 1312024,370497 1315283,370428 1315145,367515 1315006,366822 1314521,365851 1314521,364949 1314729,364256 1314937,363701 1314937,363007 1314798,362799 1314451,362661 1314035,362661 1314035,362314 1313896,361898 1313411,361828 1312995,361204 1312232,360580 1311192,360372 1310290,360025 1309111,359262 1308695,358153 1308626,357112 1308348,355448 1308556,354408 1308764,353645 1308903,352951 1308487,351772 1308140,350732 1307793,350038 1307585,349345 1307724,348929 1309180,348790 1310429,348582 1311122,348097 1311608,347403 1312093,346571 1312579,345808 1312648,344698 1311816,344560 1311608,339081 1304395,339219 1303840,337902 1303979,337416 1304673,337278 1304742,336792 1304534,336792 1304326,336168 1304326,335405 1303494,335336 1303494,334989 1304256,335058 1305019,334573 1305505,334712 1305713,335266 1306268,335266 1306268,334018 1307793,333810 1307724,332908 1307516,332700 1307377,331244 1306753,331244 1306753,330689 1306129,330550 1306198,332492 1304881,332631 1304881,333810 1303910,333741 1303840,332908 1304118,332562 1303632,331868 1303632,331383 1304256,331175 1304118,330966 1303840,330966 1303910,330689 1304811,330550 1304811,330065 1305366,329996 1305366,329094 1305019,329094 1305019,328678 1305644,328678 1305644,327430 1305297,327430 1305227,327707 1305019,327430 1304811,327430 1304673,324447 1303424,324447 1303424,323546 1302047,323492 1301769,327723 1299897,327723 1299897,328624 1297122,328763 1296845,330081 1296845,331398 1298232,331398 1298301,332855 1294903,332785 1293447,330219 1292476,330219 1290811,327584 1287829,333756 1289147,333756 1289216,337155 1287691,337501 1287483,335976 1285194,336045 1285263,340553 1283946,340692 1283807,342425 1282420,342425 1282628,347557 1283946,347696 1283876,348875 1285194,349014 1285333,349569 1284498,349713 1284521,350324 1283276,350211 1283113,351649 1287483,353522 1292753,354285 1295735,355949 1298579,359278 1300937,363300 1301006,368016 1301630,371831 1303642,375090 1305167,375229 1308566.128219567,374119.93057227193',
        BOTHELL: '1297240,298349 1303898,298327 1304170,298394 1304373,298553 1304600,298870 1304804,299096 1305189,299187 1305574,299164 1305981,299029 1307091,299957 1307385,300093 1307770,300025 1308065,299866 1307816,290197 1310442,290083 1310556,287434 1311190,287411 1311235,286755 1311869,286211 1311869,286075 1293639,286596 1293662,287932 1293979,287955 1294024,289223 1293707,289223 1293798,294522 1292462,294635 1292439,295926 1296515,295768 1296606,296719 1296832,297058 1297625,297058 1297240.45831488,298349.67771042034',
        STANWOOD: '1273121,461711 1274411,461688 1274366,463001 1276291,462934 1276291,463228 1277129,463205 1277061,459876 1278420,459899 1278397,458291 1278057,458314 1278035,458087 1277650,457680 1277469,457680 1277287,457861 1277152,457748 1277016,457702 1277016,455642 1277446,455664 1277423,455370 1276993,455347 1276948,453671 1276608,453015 1275498,453015 1275340,452086 1274026,452811 1272237,454577 1271558,455800 1269112,455800 1269112,454849 1269203,454623 1268863,454373 1268523,454260 1268025,454238 1268025,454396 1267051,454441 1267187,454962 1266961,455642 1266780,455528 1266259,456027 1265806,456208 1265172,456004 1264674,455777 1264221,455755 1264221,456412 1264628,456412 1264923,457702 1264923,457838 1264810,458246 1264810,458608 1266417,458563 1266440,458133 1267142,458065 1267142,458495 1270403,458382 1270426,459808 1269610,461529 1270154,461552 1270290,461665 1270471,461665 1270494,461145 1270924,461145 1271603,461416 1271762,461711 1271762,461914 1272169,461892 1272736,462209 1272758,461869 1273098,461869 1273121.0576620367,461711.1583371167',
        LYNNWOOD: '1274266,314311 1274288,313179 1273518,313043 1272839,313021 1272862,311753 1275511,311617 1274017,308401 1272431,306521 1270959,306906 1270982,305412 1271367,304936 1271344,303419 1270982,303396 1270982,302287 1271276,302264 1271276,299320 1272839,299252 1272997,298595 1273813,298505 1272658,296308 1272884,296172 1275873,297825 1281897,297599 1282056,300158 1283800,300203 1283890,300860 1284252,301064 1283958,301539 1284909,302219 1285475,301517 1286291,301426 1286291,301856 1286993,301856 1287332,302400 1288487,302354 1288487,301698 1289212,301698 1289235,302015 1289484,301970 1289484,302672 1288600,302739 1287966,303396 1287944,305095 1289189,306770 1286902,309284 1286472,311277 1286449,312137 1285860,312500 1284841,312636 1284796,313089 1284094,313111 1284094,313496 1283732,313587 1283324,313859 1281354,312522 1280810,312477 1280765,312930 1278138,312953 1278138,313655 1276825,313723 1276802,315014 1274922,315059 1274945,314379 1274266.12431461,314357.2718952843',
        'MILL CREEK': '1300256,324285 1301184,323447 1313390,323130 1313300,322768 1312892,322541 1311126,320616 1310990,319937 1309609,317355 1308386,316834 1307887,313302 1308091,312667 1303834,312849 1303811,311513 1303064,311490 1303041,310788 1302634,310788 1302656,311309 1302135,311830 1301796,311762 1301796,311490 1300980,311467 1301320,308886 1299124,308908 1299146,312260 1299463,312260 1299509,312871 1298965,312894 1299010,314207 1298082,314230 1298150,319552 1298489,319529 1298535,320865 1299259,320820 1299350,323470 1300301,323492 1300029,323922 1300256.3252445932,324285.2898288333',
        'GRANITE FALLS': '1356242,400364 1357470,400760 1358382,400800 1358382,399968 1359452,399849 1359491,399651 1360125,399651 1360125,400007 1360403,400285 1360759,400364 1361473,401196 1363811,401157 1363811,400879 1364088,400879 1364088,400483 1364603,400562 1365436,403217 1365792,403653 1366545,403891 1366981,404248 1367259,404089 1367853,404485 1368130,404485 1368210,401236 1367496,401236 1366862,400721 1366664,397273 1365990,397273 1366743,396242 1366743,395727 1366426,395767 1366228,395886 1365356,395886 1365317,396322 1364128,396322 1364088,394578 1362820,394578 1362741,393072 1362067,393072 1361631,393508 1361275,393746 1361076,393944 1360918,394459 1360720,394578 1360522,394499 1360244,394499 1360244,394855 1361948,394935 1361948,395133 1361552,395133 1361512,395529 1361116,395529 1361076,395886 1360205,395886 1360165,395371 1359887,395371 1359927,396005 1359095,397035 1358857,396956 1358857,397511 1358461,397550 1357866,397431 1356202,396797 1356202,397154 1355211,397273 1355211,398581 1356202,398581 1356242.0559128695,400364.4235922591',
        MUKILTEO: '1283256,351048 1283276,350211 1284521,350324 1284498,349713 1285333,349569 1285194,349014 1283876,348875 1283946,347696 1282628,347557 1282420,342425 1283807,342425 1283946,340692 1283850,340546 1283177,339991 1283137,338446 1282463,338446 1282463,332620 1285475,325328 1282662,322356 1282226,322673 1280918,322673 1280878,323981 1279491,325011 1277113,325011 1276638,324536 1275687,325051 1275726,329410 1273230,329410 1275370,337217 1277985,341458 1277906,345857 1279135,349899 1283256.504076541,351048.6516571913',
        MONROE: '1351069,325548 1352654,323691 1352518,322989 1352767,322672 1353447,322944 1353764,322627 1355077,321563 1356391,320996 1356391,319638 1355032,319660 1355009,319955 1353696,320000 1353311,319728 1356346,317871 1356346,318075 1357636,317237 1357659,318302 1358678,318324 1358678,319909 1357704,320294 1357636,320928 1357229,321110 1357229,321585 1357478,321812 1357704,321789 1357727,322242 1365494,322151 1365517,321495 1364226,321540 1364204,319570 1365472,319570 1365472,318415 1364226,317600 1363456,316897 1362777,316218 1363479,315380 1363909,315607 1364498,315629 1365313,316150 1365449,315901 1365970,316060 1366355,316014 1367691,316128 1368053,316309 1368189,316309 1368891,316060 1368891,315743 1369276,315743 1369276,314474 1368574,314520 1368461,314701 1366740,314723 1366196,314723 1365404,314950 1365404,314044 1364090,312776 1361554,310874 1361169,310783 1358882,309017 1358406,308451 1357999,308269 1357478,308156 1356481,308247 1356142,308405 1356119,309017 1355598,309017 1355576,308564 1354987,308609 1355032,309039 1353628,309039 1353605,307771 1350933,307771 1351069.52791903,325548.7038095343',
        EDMONDS: '1274266,314311 1274288,313179 1273518,313043 1272839,313021 1272862,311753 1275511,311617 1274017,308401 1272431,306521 1270959,306906 1270982,305412 1271367,304936 1271344,303419 1270982,303396 1270982,302287 1271276,302264 1271276,299320 1272839,299252 1272997,298595 1273813,298505 1272658,296308 1272250,295380 1272590,295334 1272409,293341 1271910,293319 1271888,292617 1272250,292617 1271729,290239 1272046,290239 1273201,287295 1260791,287635 1260882,292821 1261516,292866 1261516,293523 1260859,293523 1260927,295515 1259636,295583 1259636,296897 1255968,296965 1266884,310740 1269143,311849 1271164,315455 1271124,317120 1274176,317160 1274266.12431461,314311.9802286177',
        WOODWAY: '1256409,296931 1256658,295708 1256975,294825 1257111,293942 1257156,292900 1257247,291700 1256975,290975 1256250,290273 1255661,289775 1255616,288711 1256024,287782 1260791,287635 1260882,292821 1261516,292866 1261516,293523 1260859,293523 1260927,295515 1259636,295583 1259636,296897 1256409.1347369468,296931.7571600267',
        'MOUNTLAKE TERRACE': '1272658,296308 1272884,296172 1275873,297825 1281897,297599 1281976,298212 1282587,298235 1282565,297714 1283244,297737 1283221,297578 1283244,296559 1283538,296559 1283584,296808 1284557,296695 1284580,296242 1283652,296174 1283674,295291 1283402,295246 1283402,294951 1284512,294929 1284467,292891 1283833,292868 1283833,292257 1283176,292234 1283063,286980 1273201,287295 1273201,287295 1272046,290239 1271729,290239 1272250,292617 1271888,292617 1271910,293319 1272409,293341 1272590,295334 1272250,295380 1272658.2701479432,296308.5427286177',
        BRIER: '1287932,286809 1287932,287443 1288226,287465 1288385,288598 1288452,290070 1287773,290115 1287773,290907 1288407,290907 1288430,290817 1289426,290794 1288837,291383 1288679,292176 1290785,292040 1290355,292878 1289947,293466 1289902,293897 1290196,294191 1289834,294259 1289811,297362 1288271,297429 1288294,298403 1287569,298381 1287569,297452 1283221,297578 1283244,296559 1283538,296559 1283584,296808 1284557,296695 1284580,296242 1283652,296174 1283674,295291 1283402,295246 1283402,294951 1284512,294929 1284467,292891 1283833,292868 1283833,292257 1283176,292234 1283063,286980 1287932.13473695,286809.0696600267',
        SULTAN: '1398187,325757 1399545,325780 1399545,324466 1400814,324534 1400836,321273 1402059,321296 1402150,321953 1404731,321998 1404754,323243 1407743,323221 1407789,321953 1406769,321885 1406769,320617 1408717,320594 1408717,319326 1411140,319348 1411185,318624 1410234,318488 1410438,317899 1409215,317469 1408083,317695 1406905,317695 1405977,317265 1405977,316699 1406498,316699 1406249,316291 1405456,316269 1405275,315816 1405547,315816 1404709,315000 1403531,315204 1402037,315046 1399591,315385 1398843,315453 1398006,315249 1398051,315476 1394722,314230 1394722,314706 1395492,315114 1395401,317922 1395854,317922 1395854,318646 1396873,319643 1397009,320503 1398073,320549 1398066,320853 1398066,320853 1398277,321020 1398402,321019 1398404,321187 1398466,321188 1398477,321850 1398991,321856 1399002,323157 1399501,323164 1399506,324466 1399506,324466 1398179,324450 1398187.2210779432,325757.655305025',
        'GOLD BAR': '1424931,316269 1425248,316269 1425248,316518 1426494,316540 1426562,317174 1427921,316133 1429370,316223 1429370,315340 1429778,315159 1429800,316427 1430570,316518 1431068,316495 1432110,316178 1431861,315182 1431114,314638 1431114,313574 1432359,312373 1432427,311083 1433718,311105 1433673,309452 1434262,309452 1434239,308682 1433627,308954 1433627,308660 1429823,311604 1429755,310041 1429030,312283 1427445,313302 1425248,314683 1425226,315204 1424886,315453 1424931.9502446167,316269.051138359',
        INDEX: '1464873,301862 1464035,301386 1464035,301952 1461566,300729 1461566,300344 1461068,300322 1461068,298895 1461363,298895 1461589,299054 1461838,299257 1462087,299439 1462404,299574 1462744,299688 1463129,299710 1463401,299756 1463650,299846 1463808,299982 1463876,300095 1464148,300231 1464352,300435 1464533,300594 1464737,300707 1464850,300775 1464873.2304185368,301862.1887881353',
        'LAKE STEVENS': '1328071,377706 1340554,379014 1340990,378261 1341782,378261 1342060,376002 1341981,373862 1342932,371881 1342417,371841 1342417,371484 1341822,371445 1341862,370216 1340594,370137 1340554,368829 1341505,368790 1341465,367284 1338731,367323 1338771,367997 1337859,368393 1338057,369978 1337661,370652 1337859,371484 1338612,371841 1338295,372515 1336631,370612 1335521,370731 1333341,372713 1331320,373188 1330607,372752 1330448,371564 1330290,371207 1329933,371247 1329775,370375 1330964,368908 1332034,368631 1332747,368274 1333183,367482 1333540,366015 1333619,364866 1334292,363558 1334451,362766 1335045,362488 1335600,362647 1335997,362647 1335997,362092 1335521,362092 1334292,361260 1333064,361379 1332826,359992 1333143,359397 1333143,356742 1329537,356742 1329458,357891 1325336,358129 1325336,356901 1324028,356901 1324187,358050 1322800,358169 1322839,358565 1321611,358763 1321611,358248 1321017,359477 1321056,360982 1321452,361973 1320937,362330 1321849,363440 1322562,363519 1324227,365025 1324227,365936 1323989,365936 1324504,369146 1325059,368790 1324979,367957 1326525,367402 1326921,367601 1325732,368710 1325693,369939 1324504,370097 1324464,370692 1325693,370731 1325653,371326 1324464,371445 1324385,372673 1324385,373704 1325059,373704 1325019,375408 1328150,375368 1328071.1008398146,377706.7195907362',
        DARRINGTON: '1451161,464170 1454953,464119 1454943,463436 1454785,463142 1454739,462372 1454853,461783 1455034,461375 1455056,461194 1454988,461058 1454875,460945 1454898,460764 1455962,459858 1456143,459699 1456189,459450 1455509,458839 1455056,458839 1455056,458341 1454988,458001 1454173,457956 1454264,456303 1454626,456280 1454626,456212 1455079,456212 1455102,455918 1455917,455238 1456574,454310 1456415,454174 1456347,453562 1451207,453494 1451184,456846 1451025,456846 1450912,456733 1450844,456506 1450708,456393 1450278,456393 1449848,456235 1449848,459881 1449553,459858 1449531,460560 1449803,460560 1449825,460900 1451184,460288 1451161.810043009,464170.87619426264',
    };

    // This object is holds the top upper left corner and bottom lower right
    // corner of a virtual box that is used to by boxZoom_city() to zoom into 
    // the city. Sort of funky but it works.
    var private_zoomBoxesForCities = {
        SNOHOMISH:{ start:{x:1324268.0821190232, y:350804.9793392833}, end:{x:1335726.87378569, y:332597.7293392833} },
        ARLINGTON:{ start:{x:1301377.4053758, y:446269.9415842}, end:{x:1335624.0720425, y:414663.2749175} },
        MARYSVILLE:{ start:{x:1302400.1523996438, y:427973.16717942106}, end:{x:1328684.7047805963, y:374363.7767032307} },
        EVERETT:{ start:{x:1282538.047, y:383300.631125 }, end:{x:1314675.6371785714, y:319250.18916071416 } },
        BOTHELL:{ start:{x:1291714.8749815468, y:300659.55271042034}, end:{x:1312118.77081488, y:285826.531877087} },
        STANWOOD:{ start:{x:1262517.2243287, y:464077.0229204}, end:{x:1279143.8909953, y:451357.0229204} },
        LYNNWOOD:{ start:{x:1266997.8534813, y:318103.4906453}, end:{x:1292571.1868146, y:291703.4906453} },
        'MILL CREEK':{ start:{x:1297991.74191126, y:324647.6231621667}, end:{x:1313934.4085779267, y:308659.6648288333} },
        'GRANITE FALLS':{ start:{x:1352078.3701986, y:407368.1212113}, end:{x:1371558.3701986, y:391034.7878780} },
        MUKILTEO:{ start:{x:1272670.2636002866, y:350924.6177286121}, end:{x:1285351.7874098106, y:322311.92963337427} },
        MONROE:{ start:{x:1350639.2570856968, y:325820.4538095343}, end:{x:1370273.1945856968, y:307341.4538095343} },
        EDMONDS:{ start:{x:1255669.095743157, y:317278.94987147086}, end:{x:1275563.2362193475, y:287318.84987147106} },
        WOODWAY:{ start:{x:1253597.2076536, y:298938.0384100}, end:{x:1262783.8743203, y:285778.0384100} },
        'MOUNTLAKE TERRACE':{ start:{x:1269216.7255107, y:300638.4193624}, end:{x:1287376.7255107, y:284691.7526957} },
        BRIER:{ start:{x:1281176.9889036, y:299714.4446600}, end:{x:1292416.9889036, y:285554.4446600} },
        SULTAN:{ start:{x:1393006.2314946, y:326573.2282217}, end:{x:1413326.2314946, y:313306.5615550} },
        'GOLD BAR':{ start:{x:1424682.84607795, y:317197.5303050257}, end:{x:1434397.90857795, y:308048.613638359} },
        INDEX:{ start:{x:1460800.215537593, y:302078.94176432636}, end:{x:1465096.453632831, y:298779.12033575505} },
        'LAKE STEVENS':{ start:{x:1319056.4835779, y:381158.1684003}, end:{x:1345776.4835779, y:352611.5017336} },
        DARRINGTON:{ start:{x:1447932.9454597, y:466084.0562538}, end:{x:1459639.6121263, y:451617.3895871} },
    };

    return {
        cityCoordinatesInit: cityCoordinatesInit,
        resizeOneSvgCity: resizeOneSvgCity,
        resizeAllSvgCities: resizeAllSvgCities,
        getClientXYfromSP: getClientXYfromSP,
        boxZoom_city: boxZoom_city,
        svgCitiesSetOpacityToZero: svgCitiesSetOpacityToZero,
    };
}()